import type { FunctionTool as OpenAIFunctionTool } from 'openai/resources/responses/responses';
import { z, ZodObject, ZodType } from 'zod';

type ToolSchema = ZodObject<Record<string, ZodType>>;

/**
 * Defines the structure for a tool that the model can call. Each tool has a
 * name, description, a Zod schema for its arguments, and a function to execute.
 *
 * @template T The shape of the Zod schema for the tool's arguments.
 *
 * @example
 * ```typescript
 * const weatherTool: Tool<{ location: string }> = {
 *   name: 'get_weather',
 *   description: 'Get the current weather for a given location.',
 *   schema: z.object({
 *     location: z.string().describe('The city to get the weather for.'),
 *   }),
 *   func: async ({ location }) => {
 *     // In a real application, this would call a weather API.
 *     return { temperature: 22, condition: 'sunny' };
 *   },
 * };
 * ```
 */
export class Tool<TSchema extends ToolSchema = ToolSchema, TResult = unknown> {
  /** The name of the tool. Must be unique among all tools provided to the model. */
  name: string;
  /** A detailed description of what the tool does, used by the model to decide when to use it. */
  description: string;
  /** The Zod schema that defines the arguments the tool accepts. */
  schema: TSchema;
  /** The function to execute when the tool is called. It receives the parsed arguments. */
  func: (args: z.infer<TSchema>) => TResult | Promise<TResult>;

  constructor(config: {
    name: string;
    description: string;
    schema: TSchema;
    func: (args: z.infer<TSchema>) => TResult | Promise<TResult>;
  }) {
    this.name = config.name;
    this.description = config.description;
    this.schema = config.schema;
    this.func = config.func;
  }
}

/**
 * Represents a tool call request generated by the model.
 *
 * @example
 * ```typescript
 * const toolCall: ToolCall = {
 *   id: 'call_abc123',
 *   name: 'get_weather',
 *   arguments: { location: 'New York' },
 * };
 * ```
 */
export interface ToolCall {
  /** A unique identifier for this specific tool call. */
  id: string;
  /** The name of the tool the model wants to call. */
  name: string;
  /** The arguments for the tool, parsed as a JSON object. */
  arguments: unknown;
}

/**
 * Represents the result of a single tool execution. This is typically created
 * by the agent executor after running a tool.
 *
 * @example
 * ```typescript
 * const toolResult: ToolResult = {
 *   id: 'call_abc123',
 *   name: 'get_weather',
 *   result: { temperature: 22, condition: 'sunny' },
 * };
 * ```
 */
export interface ToolResult {
  /** The unique ID of the tool call this result corresponds to. */
  id: string;
  /** The name of the tool that was executed. */
  name: string;
  /** The output of the tool execution. */
  result: unknown;
}

/**
 * A utility function that converts a `Tool` into a specification that is
 * compatible with the OpenAI/Groq API's `tools` parameter.
 *
 * @param tool The tool to convert.
 * @returns An OpenAI-compatible function tool specification.
 *
 * @example
 * ```typescript
 * const openAISpec = toOpenAIToolSpec(weatherTool);
 * console.log(openAISpec);
 * // {
 * //   type: 'function',
 * //   name: 'get_weather',
 * //   description: 'Get the current weather for a given location.',
 * //   parameters: { ...Zod schema as JSON schema... },
 * //   strict: true
 * // }
 * ```
 */
export function toOpenAIToolSpec(tool: Tool): OpenAIFunctionTool {
  return {
    type: 'function',
    name: tool.name,
    description: tool.description,
    parameters: z.toJSONSchema(tool.schema) as Record<string, unknown>,
    strict: true,
  };
}
