datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [ vector(version: "0.8.0") ]
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

enum MessageRole {
  USER
  AI
  SYSTEM
  TOOL
}

enum Gender {
  MALE
  FEMALE
}

enum AgeGroup {
  AGE_13_17
  AGE_18_25
  AGE_26_35
  AGE_36_45
  AGE_46_55
  AGE_55_PLUS
}

enum PendingType {
  NONE
  VIBE_CHECK_IMAGE
  COLOR_ANALYSIS_IMAGE
  ASK_USER_INFO
  FEEDBACK
}

enum TaskType {
  SEND_FEEDBACK_REQUEST
  SCHEDULE_WARDROBE_INDEX
  PROCESS_MEMORIES
}

enum TaskStatus {
  QUEUED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum GraphRunStatus {
  RUNNING
  SUCCESSFUL
  ERROR
  ABORTED
}

enum ConversationStatus {
  OPEN
  CLOSED
}


// --- CORE ---

model User {
  id          String   @id @default(cuid())
  whatsappId  String   @unique
  createdAt   DateTime @default(now())

  conversations Conversation[]
  wardrobe      WardrobeItem[]
  memories      Memory[]
  vibeChecks    VibeCheck[]
  colorAnalyses ColorAnalysis[]
  tasks         Task[]

  inferredGender    Gender?
  inferredAgeGroup  AgeGroup?

  confirmedGender   Gender?
  confirmedAgeGroup AgeGroup?

  lastVibeCheckAt      DateTime?
  lastColorAnalysisAt  DateTime?

  @@index([createdAt])
}

model Conversation {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  status    ConversationStatus @default(OPEN)

  messages  Message[]
  graphRuns GraphRun[]
  feedback  Feedback?

  @@index([userId, createdAt])
  @@index([status, createdAt])
}

model Message {
  id               String       @id @default(cuid())
  conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId   String

  role             MessageRole
  content          Json[]       @default([])
  additionalKwargs Json? 
  createdAt        DateTime     @default(now())

  intent           String?
  buttonPayload    String?
  pending          PendingType? @default(NONE)

  media             Media[]
  memoriesProcessed Boolean @default(false)
  wardrobeProcessed Boolean @default(false)


  @@index([conversationId, createdAt])
  @@index([role, createdAt])
  @@index([buttonPayload])
}


// --- MEDIA ---

model Media {
  id          String   @id @default(cuid())
  message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId   String
  
  twilioUrl   String
  serverUrl   String
  gcsUri      String?
  
  mimeType    String
  isUploaded  Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([messageId])
}

// --- AGENT & LOGGING ---

model GraphRun {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  
  initialState   Json
  finalState     Json
  status         GraphRunStatus @default(RUNNING)
  errorTrace     String?
  
  createdAt      DateTime     @default(now())

  traces         LLMTrace[]

  @@index([conversationId, createdAt])
}

model LLMTrace {
  id          String   @id @default(cuid())
  graphRun    GraphRun @relation(fields: [graphRunId], references: [id], onDelete: Cascade)
  graphRunId  String

  model           String?
  rawRequest      Json
  rawResponse     Json
  
  promptTokens     Int?
  completionTokens Int?
  costUsd          Decimal? @db.Decimal(10, 6)
  
  createdAt       DateTime @default(now())

  @@index([graphRunId])
}

// --- USER PROFILE & ANALYSIS ---

model Memory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  memory    String

  embedding       Unsupported("vector")?
  embeddingModel  String?
  embeddingDim    Int?
  embeddingAt     DateTime?
  
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model VibeCheck {
  id                  String  @id @default(cuid())
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String

  fit_silhouette      Float?
  color_harmony       Float?
  styling_details     Float?
  accessories_texture Float?
  context_confidence  Float?
  overall_score       Float?

  comment             String?

  createdAt           DateTime @default(now())

  @@index([userId, createdAt])
}

model ColorAnalysis {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  skin_tone     String?
  eye_color     String?
  hair_color    String?
  undertone     String?
  palette_name  String?

  top3_colors   Json?
  avoid3_colors Json?

  createdAt     DateTime @default(now())

  @@index([userId, createdAt])
}

model WardrobeItem {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  name        String
  nameLower   String
  category    String
  colors      Json
  type        String
  subtype     String?
  description String?
  attributes  Json?
  createdAt   DateTime @default(now())

  embedding       Unsupported("vector")?
  embeddingModel  String?
  embeddingDim    Int?
  embeddingAt     DateTime?

  @@index([userId, nameLower, category])
}

// --- FEEDBACK ---

model Feedback {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String       @unique

  rating         Int?
  comment        String?
  createdAt      DateTime     @default(now())
}

// --- BACKGROUND PROCESSING ---

model Task {
  id        String     @id @default(cuid())
  taskId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  
  type      TaskType
  status    TaskStatus @default(QUEUED)
  payload   Json?
  
  runAt     DateTime
  
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId, runAt])
  @@index([status, runAt])
}
