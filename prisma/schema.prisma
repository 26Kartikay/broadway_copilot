datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector(version: "0.8.0")]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

enum MessageRole {
  USER
  AI
  SYSTEM
  TOOL
}

enum Gender {
  MALE
  FEMALE
}

enum AgeGroup {
  AGE_13_17
  AGE_18_25
  AGE_26_35
  AGE_36_45
  AGE_46_55
  AGE_55_PLUS
}

enum PendingType {
  NONE
  VIBE_CHECK_IMAGE
  COLOR_ANALYSIS_IMAGE
  ASK_USER_INFO
  FEEDBACK
}

enum TaskType {
  SEND_FEEDBACK_REQUEST
  SCHEDULE_WARDROBE_INDEX
  PROCESS_MEMORIES
  UPLOAD_IMAGES
}

enum TaskStatus {
  QUEUED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum GraphRunStatus {
  RUNNING
  COMPLETED
  ERROR
  ABORTED
}

enum ConversationStatus {
  OPEN
  CLOSED
}

// --- CORE ---

model User {
  id          String @id @default(cuid())
  whatsappId  String @unique
  profileName String @default("")

  inferredGender    Gender?
  inferredAgeGroup  AgeGroup?
  confirmedGender   Gender?
  confirmedAgeGroup AgeGroup?

  lastVibeCheckAt     DateTime?
  lastColorAnalysisAt DateTime?

  createdAt DateTime @default(now())

  conversations Conversation[]
  wardrobe      WardrobeItem[]
  memories      Memory[]
  vibeChecks    VibeCheck[]
  colorAnalyses ColorAnalysis[]
  tasks         Task[]
  graphRuns     GraphRun[]

  @@index([createdAt])
}

model Conversation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  status ConversationStatus @default(OPEN)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages  Message[]
  graphRuns GraphRun[]
  feedback  Feedback?

  @@index([userId, createdAt])
  @@index([status, createdAt])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  role          MessageRole
  intent        String?
  buttonPayload String?
  pending       PendingType? @default(NONE)

  content          Json[] @default([])
  additionalKwargs Json?

  memoriesProcessed Boolean @default(false)
  wardrobeProcessed Boolean @default(false)

  createdAt DateTime @default(now())

  media Media[]

  @@index([conversationId, createdAt])
  @@index([role, createdAt])
  @@index([buttonPayload])
}

// --- MEDIA ---

model Media {
  id        String  @id @default(cuid())
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  twilioUrl  String
  serverUrl  String
  gcsUri     String?
  mimeType   String
  isUploaded Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([messageId])
}

// --- USER PROFILE & ANALYSIS ---

model Memory {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  memory String

  embedding      Unsupported("vector")?
  embeddingModel String?
  embeddingDim   Int?
  embeddingAt    DateTime?

  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model VibeCheck {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  fit_silhouette      Float?
  color_harmony       Float?
  styling_details     Float?
  accessories_texture Float?
  context_confidence  Float?
  overall_score       Float?
  comment             String?

  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model ColorAnalysis {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  skin_tone     String?
  eye_color     String?
  hair_color    String?
  undertone     String?
  palette_name  String?
  top3_colors   Json?
  avoid3_colors Json?

  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model WardrobeItem {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name        String
  nameLower   String
  category    String
  type        String
  subtype     String?
  description String?
  colors      Json
  attributes  Json?

  embedding      Unsupported("vector")?
  embeddingModel String?
  embeddingDim   Int?
  embeddingAt    DateTime?

  createdAt DateTime @default(now())

  @@index([userId, nameLower, category])
}

// --- AGENT & LOGGING ---

model GraphRun {
  id             String       @id
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  status     GraphRunStatus @default(RUNNING)
  errorTrace String?

  initialState Json
  finalState   Json?

  startTime  DateTime  @default(now())
  endTime    DateTime?
  durationMs Int?

  llmTraces LLMTrace[]

  @@index([conversationId, startTime])
  @@index([userId, startTime])
}

model LLMTrace {
  id         String   @id @default(cuid())
  graphRunId String
  graphRun   GraphRun @relation(fields: [graphRunId], references: [id], onDelete: Cascade)

  nodeName         String?
  model            String
  promptTokens     Int?
  completionTokens Int?
  totalTokens      Int?
  costUsd          Decimal? @db.Decimal(10, 6)
  errorTrace       String?

  inputMessages Json
  outputMessage Json?
  rawRequest    Json
  rawResponse   Json?

  startTime  DateTime  @default(now())
  endTime    DateTime?
  durationMs Int?

  @@index([graphRunId])
}

// --- FEEDBACK ---

model Feedback {
  id             String       @id @default(cuid())
  conversationId String       @unique
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  rating  Int?
  comment String?

  createdAt DateTime @default(now())
}

// --- BACKGROUND PROCESSING ---

model Task {
  id     String @id @default(cuid())
  taskId String @unique
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type    TaskType
  status  TaskStatus @default(QUEUED)
  payload Json?
  runAt   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, runAt])
  @@index([status, runAt])
}

// --- ADMIN MANAGEMENT ---

model Admins {
  id    String  @id @default(cuid())
  email String  @unique
  name  String?
  image String?
}

model AdminWhitelist {
  id    String @id @default(cuid())
  email String @unique
}

model UserWhitelist {
  id   String @id @default(cuid())
  waId String @unique
}