datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [ vector(version: "0.8.0") ]
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

enum MessageRole {
  USER
  AI
  SYSTEM
  TOOL
}

enum Gender {
  MALE
  FEMALE
}

enum AgeGroup {
  AGE_13_17
  AGE_18_25
  AGE_26_35
  AGE_36_45
  AGE_46_55
  AGE_55_PLUS
}

enum MemoryCategory {
  PROFILE
  PREFERENCE
  STYLE
  COLOR
  SIZE
  OCCASION
  BRAND
  OTHER
}

enum PendingType {
  NONE
  VIBE_CHECK_IMAGE
  COLOR_ANALYSIS_IMAGE
  ASK_USER_INFO
}

model User {
  id          String   @id @default(cuid())
  waId        String   @unique
  createdAt   DateTime @default(now())

  wardrobe    WardrobeItem[]
  messages    Message[]
  traces      ModelTrace[]
  memories    Memory[]

  inferredGender    Gender?
  inferredAgeGroup  AgeGroup?

  confirmedGender   Gender?
  confirmedAgeGroup AgeGroup?

  lastVibeCheckAt      DateTime?
  lastColorAnalysisAt  DateTime?

  @@index([createdAt])
}

model Message {
  id               String       @id @default(cuid())
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String

  role             MessageRole
  content          Json[]       @default([])
  additionalKwargs Json? 

  intent           String?
  buttonPayload    String?
  pending          PendingType? @default(NONE)
  createdAt        DateTime     @default(now())

  memoriesProcessed Boolean      @default(false)
  wardrobeProcessed Boolean      @default(false)
  hasImage          Boolean      @default(false)
  imageArchived     Boolean      @default(false)

  feedback         Feedback?
  traces           ModelTrace[]
  vibeCheck        VibeCheck?
  color            ColorAnalysis?

  @@index([userId, createdAt])
  @@index([role, createdAt])
  @@index([buttonPayload])
}

model Memory {
  id               String         @id @default(cuid())
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String

  category         MemoryCategory
  key              String
  value            String
  confidence       Float?
  sourceMessageIds String[]       @default([])

  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([userId, category, key])
  @@index([userId, updatedAt])
}

model VibeCheck {
  id                  String  @id @default(cuid())
  message             Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId           String  @unique

  fit_silhouette      Float?
  color_harmony       Float?
  styling_details     Float?
  accessories_texture Float?
  context_confidence  Float?
  overall_score       Float?

  comment             String?

  createdAt           DateTime @default(now())
}

model ColorAnalysis {
  id            String   @id @default(cuid())
  message       Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId     String   @unique

  skin_tone     String?
  eye_color     String?
  hair_color    String?
  undertone     String?
  palette_name  String?

  top3_colors   Json?
  avoid3_colors Json?

  createdAt     DateTime @default(now())
}

model WardrobeItem {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  name        String
  nameLower   String
  category    String
  colors      Json
  type        String
  subtype     String?
  description String?
  attributes  Json?
  createdAt   DateTime @default(now())

  embedding       Unsupported("vector")?
  embeddingModel  String?
  embeddingDim    Int?
  embeddingAt     DateTime?

  @@index([userId, nameLower, category])
}

model Feedback {
  id          String   @id @default(cuid())
  message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId   String   @unique

  helpful     Boolean?
  comment     String?

  createdAt   DateTime @default(now())
}

model ModelTrace {
  id              String   @id @default(cuid())

  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId          String?

  message         Message?  @relation(fields: [messageId], references: [id], onDelete: SetNull)
  messageId       String?

  model           String?
  rawRequest      Json
  rawResponse     Json

  promptTokens     Int?
  completionTokens Int?
  costUsd          Decimal? @db.Decimal(10, 6)

  createdAt       DateTime @default(now())

  @@index([userId, createdAt])
  @@index([messageId])
}
